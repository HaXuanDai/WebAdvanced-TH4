<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="{{('frontend/css/app.css')}}" rel="stylesheet">
</head>
<body>
    <header>
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-4">
                    <a href="#"><img src="{{ asset('frontend/images/calendar.png') }}" alt="logocld" class="iconheader calendar"></a>
                    <a href="{{ route('tasks.index') }}"><img src="{{ asset('frontend/images/to-do-list.jpg') }}" alt="logotdl" class="iconheader todolist"></a>
                    <a href="{{ route('resources.index') }}">
                        <img src="{{ asset('frontend/images/library.jpg') }}" alt="logolibrary" class="iconheader resourcelibrary">
                    </a>
                </div>

                <div class="col-sm-4 d-flex align-items-center justify-content-center gap-2">
                    <button id="btn-today" class="btn btn-outline-dark">H√¥m nay</button>
                    <button id="btn-prev" class="btn text-dark"><img src="{{ ('frontend/images/left-arrow.png')}}" alt=""></button>
                    <button id="btn-next" class="btn text-dark"><img src="{{ ('frontend/images/right-arrow.png')}}" alt=""></button>
                    <p class="month-year-display" id="monthYear"></p>
                </div>
                <div class="col-sm-4 text-end dropdown">
                    <a href="#" class="d-inline-flex align-items-center text-decoration-none text-dark" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        {{ Auth::user()->name }}
                        <img src="{{ asset('frontend/images/profile.png') }}" alt="Profile" class="rounded-circle ms-2 iconheader" style="width: 50px; height: 50px;">
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                        <li><a class="dropdown-item" href="{{ route('profile.edit') }}">Profile</a></li>
                        <li>
                            <form method="POST" action="{{ route('logout') }}">
                                @csrf
                                <button type="submit" class="dropdown-item">Log Out</button>
                            </form>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </header>
    <section>
        <div>
            <div class="row">
                <div class="col-sm-3 sticky-sidebar">
                    <div class="d-flex justify-content-between align-items-center px-2">
                        <button id="prev-month" class="btn btn-sm "><img src="{{ ('frontend/images/left-arrow.png')}}" alt=""></button>
                        <h4 id="calendar-title"></h4>
                        <button id="next-month" class="btn btn-sm "><img src="{{ ('frontend/images/right-arrow.png')}}" alt=""></button>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>T2</th>
                                <th>T3</th>
                                <th>T4</th>
                                <th>T5</th>
                                <th>T6</th>
                                <th>T7</th>
                                <th>CN</th>
                            </tr>
                        </thead>
                        <tbody id="calendar-body">
                        </tbody>
                    </table>
                    <div class="tao">
                        <button data-bs-toggle="modal" data-bs-target="#createTaskModal">
                            <img class="plus" src="{{('frontend/images/plus.png') }}" alt="">T·∫°o
                        </button>
                    </div>
                    <div class="mt-4 p-3 rounded bg-light border" id="timeStatsBox">
                        <h6 class="mb-3">üìä Th·ªëng K√™ Th·ªùi Gian T·ª± H·ªçc</h6>
                        <div class="mb-2 d-flex justify-content-between">
                            <span>H√¥m nay</span>
                            <span id="todayTime" class="fw-bold text-primary">0h 0p</span>
                        </div>
                        <div class="mb-2 d-flex justify-content-between">
                            <span>Tu·∫ßn n√†y</span>
                            <span id="weekTime" class="fw-bold text-primary">0h 0p</span>
                        </div>
                        <div class="mb-2 d-flex justify-content-between">
                            <span>Th√°ng n√†y</span>
                            <span id="monthTime" class="fw-bold text-primary">0h 0p</span>
                        </div>
                        <div class="mb-2 d-flex justify-content-between">
                            <span>T·ªïng bu·ªïi h·ªçc</span>
                            <span id="totalEvents" class="fw-bold">0</span>
                        </div>
                        <div class="d-flex justify-content-between">
                            <span>T·ªïng th·ªùi gian</span>
                            <span id="totalTime" class="fw-bold text-success">0h 0p</span>
                        </div>
                    </div>
                </div>
                <div class="col-sm-9">
                    <div class="calendar-grid">
                        <div id="weekTitle" class="fw-bold fs-5 mb-2"></div> <div class="week-header" id="week-header"></div>
                        <div class="croll">
                            <div class="time-labels" id="time-labels"></div>
                            <div class="week-body" id="week-body"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div class="modal fade" id="createTaskModal" tabindex="-1" aria-labelledby="createTaskModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createTaskModalLabel">T·∫°o bu·ªïi h·ªçc m·ªõi</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="ƒê√≥ng"></button>
                </div>
                <div class="modal-body">
                    <form id="createTaskForm">
                        <div class="mb-3">
                            <label for="taskTitle" class="form-label">M√¥n h·ªçc</label>
                            <input type="text" class="form-control" id="taskTitle" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ..." required>
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="allDayCheck" onchange="toggleTimeInputs()">
                            <label class="form-check-label" for="allDayCheck">C·∫£ ng√†y</label>
                        </div>
                        <div class="mb-3 row">
                            <div class="col">
                            <label for="startDate" class="form-label">Th·ªùi gian b·∫Øt ƒë·∫ßu</label>
                            <input type="datetime-local" class="form-control" id="startDate" required>
                            </div>
                            <div class="col" id="endDateGroup">
                            <label for="endDate" class="form-label">Th·ªùi gian k·∫øt th√∫c</label>
                            <input type="datetime-local" class="form-control" id="endDate" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="taskDescription" class="form-label">Ghi ch√∫</label>
                            <textarea class="form-control" id="taskDescription" rows="3" placeholder="Nh·∫≠p ghi ch√∫..."></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label d-block mb-2">ƒê√°nh gi√° v·ªÅ bu·ªïi h·ªçc</label>
                            <div class="d-flex gap-2">
                                <div class="form-check rating-option">
                                    <input class="form-check-input" type="radio" name="difficulty" id="difficultyEasy" value="easy">
                                    <label class="form-check-label rating-easy" for="difficultyEasy" style="cursor:pointer;">
                                        <span style="font-size:1.5rem;">üòä</span><br>
                                        <span>D·ªÖ</span>
                                    </label>
                                </div>
                                <div class="form-check rating-option">
                                    <input class="form-check-input" type="radio" name="difficulty" id="difficultyMedium" value="medium">
                                    <label class="form-check-label rating-medium" for="difficultyMedium" style="cursor:pointer;">
                                        <span style="font-size:1.5rem;">üòê</span><br>
                                        <span>Trung b√¨nh</span>
                                    </label>
                                </div>
                                <div class="form-check rating-option">
                                    <input class="form-check-input" type="radio" name="difficulty" id="difficultyHard" value="hard">
                                    <label class="form-check-label rating-hard" for="difficultyHard" style="cursor:pointer;">
                                        <span style="font-size:1.5rem;">üò∞</span><br>
                                        <span>Kh√≥</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer border-secondary">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
                    <button type="button" class="btn btn-primary" onclick="submitEventForm()">
                        <span>üíæ</span>
                        T·∫°o
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="eventDetailModal" tabindex="-1" aria-labelledby="eventDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="eventDetailModalLabel">Chi ti·∫øt bu·ªïi h·ªçc</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="ƒê√≥ng"></button>
                </div>
                <div class="modal-body" id="eventDetailBody">
                    </div>
                <div class="modal-footer">
            <button type="button" class="btn btn-primary" id="editEventBtn" style="display:none;">Ch·ªânh s·ª≠a</button>
            <button type="button" class="btn btn-danger" id="deleteEventBtn" style="display:none;">X√≥a</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ƒê√≥ng</button>
        </div>
            </div>
        </div>
    </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let currentDate = new Date();
    let editingEventId = null; // Bi·∫øn to√†n c·ª•c l∆∞u id s·ª± ki·ªán ƒëang ch·ªânh s·ª≠a
    
    // Bi·∫øn l∆∞u ng√†y hi·ªán t·∫°i ƒë∆∞·ª£c ch·ªçn (cho l·ªãch th√°ng nh·ªè)
    let selectedDate = new Date(currentDate);

    // Chuy·ªÉn $events t·ª´ PHP sang JS
    // Gi·∫£ ƒë·ªãnh bi·∫øn `events` n√†y ch·ª©a T·∫§T C·∫¢ c√°c s·ª± ki·ªán m√† b·∫°n mu·ªën hi·ªÉn th·ªã
    // trong to√†n b·ªô l·ªãch, kh√¥ng ch·ªâ tu·∫ßn ƒë·∫ßu ti√™n.
    window.allEvents = @json($events);

    // H√†m ch·ªçn ng√†y trong l·ªãch th√°ng
    function selectDate(year, month, day) {
        selectedDate = new Date(year, month, day);
        currentDate = new Date(year, month, day); // C·∫≠p nh·∫≠t lu√¥n currentDate v·ªÅ ng√†y v·ª´a ch·ªçn

        // C·∫≠p nh·∫≠t l·∫°i l·ªãch th√°ng, tu·∫ßn v√† ti√™u ƒë·ªÅ
        taolich(currentDate.getMonth(), currentDate.getFullYear(), false);
        renderWeekView(currentDate); // render tu·∫ßn d·ª±a tr√™n ng√†y v·ª´a ch·ªçn
        updateWeekTitle();
        renderEventsOnWeekView(window.allEvents); // V·∫Ω s·ª± ki·ªán theo tu·∫ßn m·ªõi
    }

    // H√†m t·∫°o l·ªãch th√°ng
    function taolich(month, year, updateMainTitle = true) {
        const taobody = document.getElementById("calendar-body");
        taobody.innerHTML = "";

        // L·∫•y th·ª© c·ªßa ng√†y 1 trong th√°ng (0: CN, 1: T2, ..., 6: T7)
        let firstDay = new Date(year, month, 1).getDay();
        // ƒê·ªïi v·ªÅ index b·∫Øt ƒë·∫ßu t·ª´ Th·ª© 2 (0: T2, ..., 5: T7, 6: CN)
        firstDay = (firstDay + 6) % 7;

        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const today = new Date();

        let date = 1;
        for (let i = 0; i < 6; i++) {
            const row = document.createElement("tr");
            for (let j = 0; j < 7; j++) {
                const cell = document.createElement("td");
                if (i === 0 && j < firstDay) {
                    cell.innerText = "";
                } else if (date > daysInMonth) {
                    cell.innerText = "";
                } else {
                    cell.innerText = date;
                    if (
                        date === today.getDate() &&
                        month === today.getMonth() &&
                        year === today.getFullYear()
                    ) {
                        cell.classList.add("today");
                    }
                    // Th√™m class 'selected-day' n·∫øu l√† ng√†y ƒëang ƒë∆∞·ª£c ch·ªçn
                    if (
                        date === selectedDate.getDate() &&
                        month === selectedDate.getMonth() &&
                        year === selectedDate.getFullYear()
                    ) {
                        cell.classList.add("selected-day");
                    }

                    cell.style.cursor = "pointer";
                    const thisDate = date;
                    cell.onclick = () => selectDate(year, month, thisDate);
                    date++;
                }
                row.appendChild(cell);
            }
            taobody.appendChild(row);
            if (date > daysInMonth) break;
        }
        if (updateMainTitle) {
            updateMonthTitles(month, year);
        }
    }

    // H√†m c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ th√°ng ·ªü c·∫£ hai v·ªã tr√≠
    function updateMonthTitles(month, year) {
        document.getElementById("monthYear").innerText = `Th√°ng ${month + 1}, ${year}`;
        document.getElementById("calendar-title").innerText = `Th√°ng ${month + 1}, ${year}`;
    }

    // H√†m c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ tu·∫ßn
    function updateWeekTitle() {
        document.getElementById("weekTitle").innerText = ""; // X√≥a ti√™u ƒë·ªÅ tu·∫ßn, kh√¥ng hi·ªÉn th·ªã g√¨ c·∫£
    }

    function getWeekDates(date = new Date()) {
        // L·∫•y th·ª© c·ªßa ng√†y hi·ªán t·∫°i (0: CN, 1: T2, ..., 6: T7)
        const day = date.getDay();
        // T√≠nh offset ƒë·ªÉ v·ªÅ th·ª© 2 ƒë·∫ßu tu·∫ßn
        const offset = day === 0 ? -6 : 1 - day;
        const start = new Date(date);
        start.setDate(date.getDate() + offset);
        start.setHours(0,0,0,0);

        const week = [];
        for (let i = 0; i < 7; i++) {
            const d = new Date(start);
            d.setDate(start.getDate() + i);
            week.push({
                // ƒê·ªïi th·ª© t·ª± nh√£n: T2 -> T7, CN
                label: ['T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'CN'][i],
                date: d.getDate(),
                full: d
            });
        }
        return week;
    }

    function renderWeekView(date = new Date()) {
        const weekHeader = document.getElementById("week-header");
        const weekBody = document.getElementById("week-body");
        const timeLabels = document.getElementById("time-labels");

        const week = getWeekDates(date);
        weekHeader.innerHTML = "";
        week.forEach(day => {
            const div = document.createElement("div");
            div.className = "day-header";
            div.innerHTML = `<div>${day.label}</div><div>${day.date}</div>`;
            // Th√™m class 'selected-day-header' n·∫øu ng√†y hi·ªán t·∫°i ƒë∆∞·ª£c ch·ªçn l√† m·ªôt trong c√°c ng√†y trong tu·∫ßn ƒëang hi·ªÉn th·ªã
            if (day.full.toDateString() === selectedDate.toDateString()) {
                div.classList.add('selected-day-header');
            }
            weekHeader.appendChild(div);
        });

        timeLabels.innerHTML = `<div class="hour">GMT+07</div>`;
        for (let h = 1; h < 24; h++) {
            const div = document.createElement("div");
            div.className = "hour";
            div.textContent = h < 12 ? `${h} AM` : h === 12 ? "12 PM" : `${h - 12} PM`;
            timeLabels.appendChild(div);
        }

        weekBody.innerHTML = "";
        for (let h = 0; h < 24; h++) {
            const row = document.createElement("div");
            row.className = "hour-row";
            for (let d = 0; d < 7; d++) {
                const cell = document.createElement("div");
                cell.className = "day-cell";
                row.appendChild(cell);
            }
            weekBody.appendChild(row);
        }
    }

    document.getElementById("prev-month").addEventListener("click", () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        // Khi chuy·ªÉn th√°ng, selectedDate s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh trong taolich d·ª±a v√†o currentDate
        taolich(currentDate.getMonth(), currentDate.getFullYear(), true);
        renderWeekView(selectedDate); // Render tu·∫ßn d·ª±a tr√™n selectedDate
        updateWeekTitle();
        renderEventsOnWeekView(window.allEvents); // V·∫Ω l·∫°i s·ª± ki·ªán
    });

    document.getElementById("next-month").addEventListener("click", () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        // Khi chuy·ªÉn th√°ng, selectedDate s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh trong taolich d·ª±a v√†o currentDate
        taolich(currentDate.getMonth(), currentDate.getFullYear(), true);
        renderWeekView(selectedDate); // Render tu·∫ßn d·ª±a tr√™n selectedDate
        updateWeekTitle();
        renderEventsOnWeekView(window.allEvents); // V·∫Ω l·∫°i s·ª± ki·ªán
    });

    document.getElementById("btn-prev").addEventListener("click", () => {
        currentDate.setDate(currentDate.getDate() - 7);
        selectedDate.setDate(selectedDate.getDate() - 7); // C·∫≠p nh·∫≠t selectedDate theo tu·∫ßn m·ªõi
        taolich(currentDate.getMonth(), currentDate.getFullYear(), true); // C·∫≠p nh·∫≠t l·ªãch th√°ng ƒë·ªÉ l√†m n·ªïi b·∫≠t ng√†y ƒë√∫ng
        renderWeekView(currentDate); // render tu·∫ßn m·ªõi
        updateWeekTitle();
        renderEventsOnWeekView(window.allEvents); // V·∫Ω l·∫°i s·ª± ki·ªán
    });

    document.getElementById("btn-next").addEventListener("click", () => {
        currentDate.setDate(currentDate.getDate() + 7);
        selectedDate.setDate(selectedDate.getDate() + 7); // C·∫≠p nh·∫≠t selectedDate theo tu·∫ßn m·ªõi
        taolich(currentDate.getMonth(), currentDate.getFullYear(), true); // C·∫≠p nh·∫≠t l·ªãch th√°ng ƒë·ªÉ l√†m n·ªïi b·∫≠t ng√†y ƒë√∫ng
        renderWeekView(currentDate); // render tu·∫ßn m·ªõi
        updateWeekTitle();
        renderEventsOnWeekView(window.allEvents); // V·∫Ω l·∫°i s·ª± ki·ªán
    });

    document.getElementById("btn-today").addEventListener("click", () => {
        currentDate = new Date();
        selectedDate = new Date(); // C·∫≠p nh·∫≠t selectedDate v·ªÅ h√¥m nay
        taolich(currentDate.getMonth(), currentDate.getFullYear(), true);
        renderWeekView(currentDate);
        updateWeekTitle();
        renderEventsOnWeekView(window.allEvents); // V·∫Ω l·∫°i s·ª± ki·ªán
    });

    function toggleTimeInputs() {
        const allDay = document.getElementById('allDayCheck').checked;
        const startInput = document.getElementById('startDate');
        const endInput = document.getElementById('endDate');
        const endDateGroup = document.getElementById('endDateGroup');

        if (allDay) {
            startInput.type = 'date';
            endDateGroup.style.display = 'none'; // ·∫®n √¥ k·∫øt th√∫c
        } else {
            startInput.type = 'datetime-local';
            endDateGroup.style.display = 'block'; // Hi·ªán l·∫°i √¥ k·∫øt th√∫c
            endInput.type = 'datetime-local';
        }
    }
    
    function submitEventForm() {
    const title = document.getElementById('taskTitle').value;
    const allDay = document.getElementById('allDayCheck').checked;
    let startDate = document.getElementById('startDate').value;
    let endDate = null;
    if (!allDay) {
        endDate = document.getElementById('endDate').value;
    }
    let startDateISO, endDateISO;
    if (allDay) {
        // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng cho all_day (YYYY-MM-DD 00:00:00)
        startDateISO = startDate ? startDate + ' 00:00:00' : null;
        endDateISO = null; // C·∫£ ng√†y kh√¥ng c√≥ end_time ri√™ng
    } else {
        // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng cho datetime-local (YYYY-MM-DD HH:MM:SS)
        startDateISO = startDate && startDate.length === 16 ? startDate + ':00' : startDate;
        endDateISO = endDate && endDate.length === 16 ? endDate + ':00' : endDate;
    }
    const description = document.getElementById('taskDescription').value;
    const difficulty = document.querySelector('input[name="difficulty"]:checked')?.value || null;

    if (!title || !startDate) {
        alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ v√† th·ªùi gian b·∫Øt ƒë·∫ßu!');
        return;
    }

    const payload = {
        title: title,
        all_day: !!allDay,
        start_time: startDateISO,
        end_time: endDateISO,
        description: description,
        difficulty: difficulty
    };

    let url;
    let method;

    if (editingEventId) {
        url = `/events/${editingEventId}`; // Endpoint ch·ªânh s·ª≠a
        method = 'PUT'; // Ho·∫∑c 'PATCH' t√πy thu·ªôc v√†o route c·ªßa Laravel
        payload._method = 'PUT'; // Laravel c·∫ßn _method cho PUT/PATCH qua POST
    } else {
        url = "{{ route('events.store') }}"; // Endpoint t·∫°o m·ªõi
        method = 'POST';
    }

    fetch(url, {
        method: 'POST', // Lu√¥n d√πng POST v√¨ Laravel c·∫ßn _method cho PUT/PATCH
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': '{{ csrf_token() }}'
        },
        body: JSON.stringify(payload)
    })
    .then(response => {
        // Ki·ªÉm tra response.ok T·∫†I ƒê√ÇY
        if (!response.ok) {
            // N·∫øu c√≥ l·ªói HTTP (v√≠ d·ª•: 400, 500)
            const contentType = response.headers.get("content-type");
            if (contentType && contentType.includes("application/json")) {
                return response.json().then(err => { 
                    throw new Error(err.message || "L·ªói server."); 
                });
            } else {
                return response.text().then(text => { 
                    throw new Error("L·ªói server: " + text.slice(0, 100) + "..."); 
                });
            }
        }
        return response.json(); // Ph√¢n t√≠ch JSON body
    })
    .then(data => { // `data` ·ªü ƒë√¢y l√† JSON response t·ª´ server
        // N·∫øu server tr·∫£ v·ªÅ d·ªØ li·ªáu th√†nh c√¥ng
        if (data.success || data.id) { // Ki·ªÉm tra `success` ho·∫∑c s·ª± t·ªìn t·∫°i c·ªßa `id` c·ªßa event m·ªõi/c·∫≠p nh·∫≠t
            alert(editingEventId ? 'C·∫≠p nh·∫≠t s·ª± ki·ªán th√†nh c√¥ng!' : 'T·∫°o s·ª± ki·ªán th√†nh c√¥ng!');
            
            // C·∫≠p nh·∫≠t l·∫°i events trong `window.allEvents`
            if (editingEventId) {
                // T√¨m v√† c·∫≠p nh·∫≠t s·ª± ki·ªán trong m·∫£ng allEvents
                const index = window.allEvents.findIndex(ev => ev.id === editingEventId);
                if (index !== -1) {
                    // C·∫≠p nh·∫≠t thu·ªôc t√≠nh c·ªßa s·ª± ki·ªán ƒë√£ c√≥
                    window.allEvents[index] = { ...window.allEvents[index], ...data.event }; 
                    // Gi·∫£ ƒë·ªãnh backend tr·∫£ v·ªÅ object event ƒë√£ c·∫≠p nh·∫≠t trong data.event
                }
                editingEventId = null; // Reset bi·∫øn
            } else {
                // Th√™m s·ª± ki·ªán m·ªõi v√†o m·∫£ng allEvents
                // Gi·∫£ ƒë·ªãnh backend tr·∫£ v·ªÅ event m·ªõi t·∫°o trong data.event
                if (data.event) {
                    window.allEvents.push(data.event);
                } else {
                    // Fallback n·∫øu backend kh√¥ng tr·∫£ v·ªÅ event m·ªõi (c·∫ßn reload)
                    location.reload(); 
                    return; 
                }
            }

            // ƒê√≥ng modal v√† reset form
            const modalEl = document.getElementById('createTaskModal');
            const modal = bootstrap.Modal.getInstance(modalEl);
            modal.hide();
            document.getElementById('createTaskForm').reset();
            
            // Sau khi c·∫≠p nh·∫≠t m·∫£ng, render l·∫°i l·ªãch m√† kh√¥ng c·∫ßn t·∫£i l·∫°i trang
            renderEventsOnWeekView(window.allEvents); // V·∫Ω l·∫°i c√°c s·ª± ki·ªán tr√™n l·ªãch tu·∫ßn
            calculateTimeStats(window.allEvents); // C·∫≠p nh·∫≠t th·ªëng k√™ th·ªùi gian
        } else {
            // ƒê√¢y l√† tr∆∞·ªùng h·ª£p server tr·∫£ v·ªÅ 200 OK nh∆∞ng logic nghi·ªáp v·ª• b√°o l·ªói (v√≠ d·ª•: validation)
            alert('L·ªói nghi·ªáp v·ª•: ' + (data.message || 'Kh√¥ng r√µ nguy√™n nh√¢n.'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('L·ªói: ' + error.message || 'L·ªói m·∫°ng ho·∫∑c m√°y ch·ªß kh√¥ng ph·∫£n h·ªìi.');
    });

    }

    // --- Th·ªëng k√™ th·ªùi gian ---
    function calculateTimeStats(events) {
        // Helper: parse date string to Date object
        function parseDate(str) {
            // Handles both 'YYYY-MM-DDTHH:mm' and 'YYYY-MM-DD HH:mm:ss'
            if (!str) return null;
            if (str.includes('T')) return new Date(str);
            return new Date(str.replace(' ', 'T'));
        }

        const now = new Date();
        const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
        const todayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);

        // Tu·∫ßn n√†y: t·ª´ Ch·ªß nh·∫≠t ƒë·∫øn th·ª© 7
        const weekStart = new Date(todayStart);
        weekStart.setDate(todayStart.getDate() - todayStart.getDay());
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        weekEnd.setHours(23,59,59,999);

        // Th√°ng n√†y
        const monthStart = new Date(now.getFullYear(), now.getMonth(), 1, 0, 0, 0, 0);
        const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);

        let todayHours = 0, weekHours = 0, monthHours = 0, totalHours = 0, totalEvents = 0;

        events.forEach(ev => {
            let start = parseDate(ev.start_time);
            let end = ev.end_time ? parseDate(ev.end_time) : start;
            if (!start) return;
            if (ev.all_day) {
                // All day = 24h
                end = new Date(start);
                end.setHours(23,59,59,999);
            }
            let duration = (end - start) / (1000 * 60 * 60);
            if (duration <= 0) duration = ev.all_day ? 24 : 1;

            totalHours += duration;
            totalEvents++;

            // Today
            if (start <= todayEnd && end >= todayStart) {
                // Event overlaps today
                let overlapStart = start > todayStart ? start : todayStart;
                let overlapEnd = end < todayEnd ? end : todayEnd;
                let overlap = (overlapEnd - overlapStart) / (1000 * 60 * 60);
                if (overlap > 0) todayHours += overlap;
            }
            // This week
            if (start <= weekEnd && end >= weekStart) {
                let overlapStart = start > weekStart ? start : weekStart;
                let overlapEnd = end < weekEnd ? end : weekEnd;
                let overlap = (overlapEnd - overlapStart) / (1000 * 60 * 60);
                if (overlap > 0) weekHours += overlap;
            }
            // This month
            if (start <= monthEnd && end >= monthStart) {
                let overlapStart = start > monthStart ? start : monthStart;
                let overlapEnd = end < monthEnd ? end : monthEnd;
                let overlap = (overlapEnd - overlapStart) / (1000 * 60 * 60);
                if (overlap > 0) monthHours += overlap;
            }
        });

        function formatTime(hours) {
            const h = Math.floor(hours);
            const m = Math.round((hours - h) * 60);
            return `${h}h ${m}p`;
        }

        document.getElementById('todayTime').textContent = formatTime(todayHours);
        document.getElementById('weekTime').textContent = formatTime(weekHours);
        document.getElementById('monthTime').textContent = formatTime(monthHours);
        document.getElementById('totalEvents').textContent = totalEvents;
        document.getElementById('totalTime').textContent = formatTime(totalHours);
    }

    // H√†m hi·ªÉn th·ªã event l√™n l·ªãch tu·∫ßn (v√≠ d·ª•: ch√®n v√†o c√°c √¥ gi·ªù t∆∞∆°ng ·ª©ng)
    function renderEventsOnWeekView(events) {
        const weekBody = document.getElementById("week-body");
        // X√≥a t·∫•t c·∫£ c√°c s·ª± ki·ªán c≈© tr∆∞·ªõc khi render l·∫°i
        const oldEvents = weekBody.querySelectorAll('.event-item');
        oldEvents.forEach(eventDiv => eventDiv.remove());

        const weekDates = getWeekDates(currentDate);
        const weekStart = weekDates[0].full; // L·∫•y Ch·ªß Nh·∫≠t ƒë·∫ßu tu·∫ßn hi·ªán t·∫°i
        const weekEnd = weekDates[6].full; // L·∫•y Th·ª© B·∫£y cu·ªëi tu·∫ßn hi·ªán t·∫°i
        weekEnd.setHours(23,59,59,999); // Set ƒë·∫øn cu·ªëi ng√†y Th·ª© B·∫£y

        const MILLISECONDS_PER_HOUR = 60 * 60 * 1000;
        const HOUR_HEIGHT = 60; // px chi·ªÅu cao 1 gi·ªù trong l·ªãch

        events.forEach(event => {
            let start = new Date(event.start_time);
            let end = event.end_time ? new Date(event.end_time) : new Date(event.start_time);

            if(event.all_day) {
                // N·∫øu s·ª± ki·ªán c·∫£ ng√†y, m·ªü r·ªông th·ªùi gian t·ª´ 0h ƒë·∫øn 23:59:59
                start.setHours(0,0,0,0);
                end.setHours(23,59,59,999);
            }

            // N·∫øu s·ª± ki·ªán kh√¥ng n·∫±m trong tu·∫ßn hi·ªán t·∫°i th√¨ b·ªè qua
            // ƒêi·ªÅu ki·ªán n√†y s·∫Ω l·ªçc c√°c s·ª± ki·ªán t·ª´ `allEvents`
            if (end < weekStart || start > weekEnd) {
                return;
            }

            // L·∫∑p qua t·ª´ng ng√†y m√† s·ª± ki·ªán k√©o d√†i trong tu·∫ßn hi·ªán t·∫°i
            let currentSegmentStart = new Date(Math.max(start.getTime(), weekStart.getTime()));
            let currentSegmentEnd;

            while (currentSegmentStart <= end && currentSegmentStart <= weekEnd) {
                let dayOfSegment = new Date(currentSegmentStart);
                dayOfSegment.setHours(0,0,0,0); // ƒê·∫∑t v·ªÅ ƒë·∫ßu ng√†y

                let dayEndBoundary = new Date(dayOfSegment);
                dayEndBoundary.setHours(23,59,59,999); // Cu·ªëi ng√†y hi·ªán t·∫°i

                currentSegmentEnd = new Date(Math.min(end.getTime(), dayEndBoundary.getTime(), weekEnd.getTime()));

                if (currentSegmentStart > currentSegmentEnd) {
                    break; // Ng·ª´ng n·∫øu kh√¥ng c√≤n th·ªùi gian ƒë·ªÉ v·∫Ω
                }

                const jsDay = currentSegmentStart.getDay(); // 0: CN, 1: T2, ..., 6: T7
                const dayIndex = (jsDay + 6) % 7; // 0: T2, ..., 5: T7, 6: CN
                const startHour = currentSegmentStart.getHours() + currentSegmentStart.getMinutes()/60;
                const durationHours = (currentSegmentEnd.getTime() - currentSegmentStart.getTime()) / MILLISECONDS_PER_HOUR;

                const weekBody = document.getElementById("week-body");
                const startRow = Math.floor(startHour);
                const cell = weekBody.children[startRow]?.children[dayIndex];
                
                if (!cell) {
                     currentSegmentStart = new Date(dayEndBoundary.getTime() + MILLISECONDS_PER_HOUR); // Chuy·ªÉn sang ng√†y ti·∫øp theo
                     continue;
                }

                const eventDiv = document.createElement("div");
                eventDiv.classList.add("event-item");

                // G√°n m√†u theo ƒë·ªô kh√≥
                if (event.difficulty === 'easy') {
                    eventDiv.classList.add('event-easy');
                } else if (event.difficulty === 'medium') {
                    eventDiv.classList.add('event-medium');
                } else if (event.difficulty === 'hard') {
                    eventDiv.classList.add('event-hard');
                }

                const maxTitleLength = 18;
                let displayTitle = event.title.length > maxTitleLength
                    ? event.title.slice(0, maxTitleLength) + "..."
                    : event.title;
                eventDiv.innerHTML = `<strong title="${event.title.replace(/"/g, '&quot;')}">${displayTitle}</strong>`;

                const top = (startHour - startRow) * HOUR_HEIGHT;
                let height = durationHours * HOUR_HEIGHT;
                if (height < 10) height = 10; // ƒê·∫£m b·∫£o event c√≥ chi·ªÅu cao t·ªëi thi·ªÉu

                eventDiv.style.position = "absolute";
                eventDiv.style.top = `${top}px`;
                eventDiv.style.height = `${height}px`;
                eventDiv.style.left = "2px";
                eventDiv.style.right = "2px";
                eventDiv.style.backgroundColor = '#0d6efd';
                eventDiv.style.color = '#fff';
                eventDiv.style.borderRadius = "4px";
                eventDiv.style.padding = "2px 5px";
                eventDiv.style.fontSize = "0.85rem";
                eventDiv.style.overflow = "hidden";
                eventDiv.style.whiteSpace = "nowrap";
                eventDiv.style.textOverflow = "ellipsis";
                eventDiv.style.cursor = "pointer";

                cell.style.position = "relative";
                cell.appendChild(eventDiv);

                // Th√™m tr√¨nh x·ª≠ l√Ω s·ª± ki·ªán click cho t·ª´ng s·ª± ki·ªán
                eventDiv.addEventListener('click', function() {
                    // Fetch chi ti·∫øt s·ª± ki·ªán khi click
                    fetch(`/events/${event.id}`)
                        .then(res => res.json())
                        .then(data => {
                            let startDisplay = new Date(data.start_time).toLocaleString('vi-VN');
                            let endDisplay = data.end_time ? new Date(data.end_time).toLocaleString('vi-VN') : 'N/A';

                            let html = `
                                <div><strong>M√¥n h·ªçc:</strong> ${data.title}</div>
                                <div><strong>B·∫Øt ƒë·∫ßu:</strong> ${startDisplay}</div>
                                <div><strong>K·∫øt th√∫c:</strong> ${data.all_day ? 'C·∫£ ng√†y' : endDisplay}</div>
                                <div><strong>ƒê√°nh gi√°:</strong> ${data.difficulty === 'easy' ? 'üòä D·ªÖ' : data.difficulty === 'medium' ? 'üòê Trung b√¨nh' : data.difficulty === 'hard' ? 'üò∞ Kh√≥' : ''}</div>
                                <div><strong>Ghi ch√∫:</strong> ${data.description ?? ''}</div>
                            `;
                            document.getElementById('eventDetailBody').innerHTML = html;
                            let modal = new bootstrap.Modal(document.getElementById('eventDetailModal'));
                            const deleteBtn = document.getElementById('deleteEventBtn');
                            const editBtn = document.getElementById('editEventBtn');
                            deleteBtn.style.display = 'inline-block';
                            editBtn.style.display = 'inline-block';

                            // X·ª≠ l√Ω n√∫t X√≥a
                            deleteBtn.onclick = function() {
                                if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·ª± ki·ªán n√†y?')) {
                                    fetch(`/events/${event.id}`, {
                                        method: 'DELETE',
                                        headers: {
                                            'X-CSRF-TOKEN': '{{ csrf_token() }}',
                                            'Accept': 'application/json'
                                        }
                                    })
                                    .then(res => {
                                        if (res.ok) {
                                            modal.hide();
                                            location.reload();
                                        } else {
                                            res.text().then(text => alert(text));
                                        }
                                    });
                                }
                            };

                            // X·ª≠ l√Ω n√∫t Ch·ªânh s·ª≠a
                            editBtn.onclick = function() {
                                editingEventId = data.id;
                                document.getElementById('taskTitle').value = data.title;
                                document.getElementById('allDayCheck').checked = data.all_day;
                                if (data.all_day) {
                                    document.getElementById('startDate').type = 'date';
                                    // S·ª≠ d·ª•ng h√†m m·ªõi ƒë·ªÉ ƒë·ªãnh d·∫°ng
                                    document.getElementById('startDate').value = formatDateForInput(data.start_time, 'date');
                                    document.getElementById('endDateGroup').style.display = 'none';
                                } else {
                                    document.getElementById('startDate').type = 'datetime-local';
                                    // S·ª≠ d·ª•ng h√†m m·ªõi ƒë·ªÉ ƒë·ªãnh d·∫°ng
                                    document.getElementById('startDate').value = formatDateForInput(data.start_time, 'datetime-local');
                                    document.getElementById('endDateGroup').style.display = 'block';
                                    document.getElementById('endDate').type = 'datetime-local';
                                    // S·ª≠ d·ª•ng h√†m m·ªõi ƒë·ªÉ ƒë·ªãnh d·∫°ng
                                    document.getElementById('endDate').value = formatDateForInput(data.end_time, 'datetime-local');
                                }
                                document.getElementById('taskDescription').value = data.description ?? '';
                                toggleTimeInputs();
                                modal.hide();
                                let createModal = new bootstrap.Modal(document.getElementById('createTaskModal'));
                                createModal.show();
                                };

                            modal.show();
                        });
                });
                
                // Chu·∫©n b·ªã cho ph√¢n ƒëo·∫°n ti·∫øp theo (ng√†y ti·∫øp theo)
                currentSegmentStart = new Date(currentSegmentEnd.getTime() + 1); // B·∫Øt ƒë·∫ßu t·ª´ 1ms sau khi ph√¢n ƒëo·∫°n n√†y k·∫øt th√∫c
            }
        });

        // Sau khi render xong, c·∫≠p nh·∫≠t th·ªëng k√™
        calculateTimeStats(events);
    }

    // ... (c√°c h√†m v√† bi·∫øn kh√°c c·ªßa b·∫°n)

    // H√†m m·ªõi ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y/gi·ªù cho input HTML
    function formatDateForInput(dateTimeString, type) {
        if (!dateTimeString) {
            return '';
        }
        const date = new Date(dateTimeString);
        if (isNaN(date.getTime())) { // Ki·ªÉm tra xem c√≥ ph·∫£i l√† ng√†y kh√¥ng h·ª£p l·ªá kh√¥ng
            console.error("Invalid date string provided to formatDateForInput:", dateTimeString);
            return '';
        }

        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');

        if (type === 'date') {
            return `${year}-${month}-${day}`;
        } else if (type === 'datetime-local') {
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }
        return ''; // M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ r·ªóng n·∫øu lo·∫°i kh√¥ng x√°c ƒë·ªãnh
    }

// ... (c√°c h√†m kh√°c c·ªßa b·∫°n)

    // Kh·ªüi t·∫°o ban ƒë·∫ßu
    taolich(currentDate.getMonth(), currentDate.getFullYear(), true);
    renderWeekView(currentDate);
    updateWeekTitle();
    renderEventsOnWeekView(window.allEvents); // G·ªçi l·∫ßn ƒë·∫ßu ƒë·ªÉ hi·ªÉn th·ªã s·ª± ki·ªán

    function fetchEventsAndRender(focusEventId = null) {
    fetch("{{ route('calendar.layout') }}", {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(res => res.json())
    .then(data => {
        window.allEvents = data.events;
        // N·∫øu c√≥ focusEventId (v·ª´a ch·ªânh s·ª≠a ho·∫∑c t·∫°o), chuy·ªÉn l·ªãch sang ng√†y m·ªõi
        if (focusEventId) {
            const event = window.allEvents.find(ev => ev.id === focusEventId);
            if (event) {
                // L·∫•y ng√†y b·∫Øt ƒë·∫ßu c·ªßa s·ª± ki·ªán
                let start = event.start_time.replace(' ', 'T');
                let dateObj = new Date(start);
                currentDate = new Date(dateObj);
                selectedDate = new Date(dateObj);
                taolich(currentDate.getMonth(), currentDate.getFullYear(), true);
                renderWeekView(currentDate);
                updateWeekTitle();
            }
        }
        renderEventsOnWeekView(window.allEvents);
        // ƒê√≥ng modal v√† reset form
        const modalEl = document.getElementById('createTaskModal');
        const modal = bootstrap.Modal.getInstance(modalEl);
        modal.hide();
        document.getElementById('createTaskForm').reset();
    })
    .catch(error => {
        alert('Kh√¥ng th·ªÉ t·∫£i l·∫°i s·ª± ki·ªán m·ªõi!');
        console.error(error);
    });
}
</script>
</body>
</html>
